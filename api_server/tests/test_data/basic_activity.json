{
    "__files": {
        "exec.py":"#!/usr/bin/env python3\n# coding: utf-8\n\nimport sys, json, jsonpickle, copy\n\nfrom platon import makepayload\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 5:\n        msg = (\"Sandbox did not call exec properly:\\n\"\n               +\"Usage: python3 exec.py [exec] [input_json] [output_json] [result_json]\")\n        print(msg, file=sys.stderr)\n        sys.exit(1)\n    command_exec = sys.argv[1]\n    input_json = sys.argv[2]\n    output_json = sys.argv[3]\n    result_json = sys.argv[4]\n    \n    with open(input_json, \"r+\") as f:\n        dic = json.load(f)\n        copy_dic = copy.deepcopy(dic)\n    \n    if command_exec in dic:\n        exec(dic[command_exec], copy_dic)\n    else:\n        print((\"No default next script. Please define a next script.\"),\n              file = sys.stderr)\n        sys.exit(1)\n\n    for key in copy_dic.keys():\n        if key in dic.keys():\n            dic[key] = copy_dic[key]\n\n    ploaddic = makepayload(dic)\n    with open(result_json,\"w+\") as pload:\n        pload.write(jsonpickle.encode(ploaddic, unpicklable=False))\n\n    with open(output_json, \"w+\") as output:\n        output.write(jsonpickle.encode(dic, unpicklable=False))\n    with open(input_json, \"w+\") as f:\n        f.write(jsonpickle.encode(dic, unpicklable=False))\n    \n    sys.exit(0)",
        "platon.py":"import os, subprocess, json, jsonpickle\n\ndef valid_key(key):\n    # pas de code \n    if key.endswith(\".py\"): \n        return False\n    # pas les settings \n    if key==\"settings\":\n        return False\n    # pas les variables \"_privées\" \n    if key.startswith(\"_\"):\n        return False\n    # pas les start, next et end\n    if key in [\"start\", \"next\", \"end\"]:\n        return False\n    return True\n\ndef makepayload(dic):\n    \"\"\"\n    Objectif réduire la taille du dict retourné au front.\n    \"\"\"\n    d={}\n    for key in dic.keys():\n        if valid_key(key):\n            d[key]= dic[key]\n    return d\n\ndef build(plid, params):\n    \"\"\"\n    création de l'environement\n    \"\"\"\n    try:\n        os.mkdir(str(plid))\n        with open(str(plid)+\".json\", \"r\") as f:\n            pl = json.load(f)\n            pl.update(params)\n    except FileExistsError as e:\n        print(e)\n\n    try:\n        f = open(os.path.join(str(plid), \"pl.json\"), \"w\")\n        f.write(jsonpickle.encode(pl, unpicklable=False))\n\n        for file in pl[\"__files\"]:\n            f = open(os.path.join(str(plid), file), \"w\")\n            f.write(pl[\"__files\"][file])\n    except Exception as e:\n        print(e)\n\n    print(plid)\n\n    command = \"python3 builder.py pl.json processed.json 2> stderr.log\"\n    subprocess.run([command], shell=True, cwd=str(plid))\n"
    },
    "lst_exos": [
        2
    ],
    "settings": {
        "nbtry":0,
        "reroll":"True",
        "syntactic":"True",
        "feedback":"False",
        "evaluation":"False",
        "validation":"True"
    },
    "start":"import os\nfrom platon import build\nbuild(lst_exos[current], {})\n",
    "start2":"import os\nfrom platon import build\nfor i in lst_exos:\n    build(i, {})\n",
    "next":"from platon import build\ncurrent = current+1\nbuild(lst_exos[current], {})\n",
    "end":""
}

