{
  "__format": ".pl", 
  "__rel_path": "/srv/local/pl/premierlangage/home/Yggdrasil/ComputerScience/python/concept/variable/variable001.pl", 
  "__comment": "\n# OCE : test 11/09/2019 OK\n# comme ca cela se passera bien", 
  "__files": {
    "sandboxio.py": "# coding: utf-8\n\nimport sys, json, jsonpickle\nfrom components import Component\n\ndef get_answers():\n    \"\"\"Return a dictionnary containing every answer.\"\"\"\n    with open(sys.argv[2], \"r\") as f:\n        answers = json.load(f)\n    return answers\n\n\ndef get_context():\n    \"\"\"Return the dictionnary containing the context of the exercise.\"\"\"\n    with open(sys.argv[1], \"r\") as f:\n        context = json.load(f)\n    Component.sync_context(context)\n    return context\n\n\ndef output(grade, feedback, context=None):\n    \"\"\"Used to output the grade, feedback and context to the sandbox.\n    \n    Parameters:\n        grade - (int) Grade of the student. Should be an integer or implementing __int__.\n        feedback - (str) Feedback shown to the student. Should be a str or implementing __str__.\n        context - (dict - optionnal) Modified context of the exercise.\"\"\"\n    with open(sys.argv[3], \"w+\") as f:\n        f.write(jsonpickle.encode(context if context else get_context(), unpicklable=False))\n    \n    with open(sys.argv[4], \"w+\") as f:\n        print(str(feedback), file=f)\n    \n    print(int(grade))\n    \n    sys.exit(0)\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "pltest_doc.py": "\n# Version 26/9/2019\n# ajout de runcompiletest \nimport doctest\nimport traceback\n\n\nimport feedback2\n\ndef subnlbybr(str):\n    \"\"\"\n>>> subnlbybr(\"\\\\n\")\n'<br/>'\n    \"\"\"\n    if str :\n       str = \"<br/>\".join(str.split(\"\\n\"))\n       return \"&nbsp;\".join(str.split(\" \"))\n    return None\n\n#from runsql import buildtest\n\n\n\n\n\n#class SQLPlRunner(PlRunner):\n#    def __init__(self,student,soluce,fb = None):\n#        super().__init__()\n#        self.student= \"from runsql import * \\n\" \n#        self.pltest= buildtest(soluce,studentcode)\n\n\n\nclass PlRunner(doctest.DocTestRunner):\n    def __init__(self,studentcode,pltest,fb = None):\n        self.right = 0\n        self.fail = 0\n        self.total = 0\n        self.testnum = -1\n        if not fb :\n            self.fb=feedback2.FeedBack()\n        else:\n            self.fb=fb\n        \n        self.student= studentcode\n        self.pltest= pltest\n        super().__init__()\n\n    def runpltest(self, name):\n        self.fb.name=str(name)\n        dic = {}\n        # ~ with open(\"student.py\",\"r\") as f:\n        # ~ exec(f.read(),dic)\n        dic['__student']=self.student\n        try:\n            compile(self.student,\"Votre code\",'exec')\n            exec(self.student, dic)\n        except SyntaxError as e:\n            self.fb.addTestSyntaxError(name,subnlbybr(traceback.format_exc(limit=0,chain=False)),\" Syntaxe \")\n        except Exception as e:\n            self.fb.addTestSyntaxError(name,subnlbybr(traceback.format_exc(limit=0,chain=False)),\" Exception \")\n        else:\n            test = doctest.DocTestParser().get_doctest(self.pltest, dic, 'votre travail', 'foo.py', 0)\n            self.run(test)\n            #print(self.fb.getOutput())\n        return self.grade(),self.fb.render()\n\n    def runcompiletest(self, dic={}, name=\"compiletest\"):\n        try:\n            compile(self.student,\"Votre code\",'exec')\n            exec(self.student, dic)\n            return True,\"Compilation OK\"\n        except SyntaxError as e:\n            self.fb.addTestSyntaxError(name,subnlbybr(traceback.format_exc(limit=0,chain=False)),\" Syntaxe \")\n        except Exception as e:\n            self.fb.addTestSyntaxError(name,subnlbybr(traceback.format_exc(limit=0,chain=False)),\" Exception \")\n        \n        return False,self.fb.render()\n            \n            \n    def testtitle(self, line):\n            if line.endswith(\"\\n\"):\n                line = line[:-1]\n            if \"#\" not in line:\n                return line\n            else:\n                if line.endswith(\"#\"): # Hidden\n                    return None\n                found = line.split(\"#\", 1) # couper sur le premier #\n                if found[1].startswith(\"#\"): # Num\u00e9ro du test\n                    return \" \"\n                else:\n                    return found[1]\n\n    def report_start(self, out, test, example):\n        pass\n    def report_success(self, out, test, example, got):\n        sortie = self.testtitle(example.source)\n        if sortie:\n            self.fb.addTestSuccess(sortie, got, example.want)\n            self.right += 1\n            self.total += 1\n\n    def report_failure(self, out, test, example, got):\n        sortie = self.testtitle(example.source)\n        if sortie:\n            self.fb.addTestFailure(sortie, got, example.want)\n            self.fail += 1\n            self.total += 1\n\n    def report_unexpected_exception(self, out, test, example, exc_info):\n        sortie = self.testtitle(example.source)\n        self.total += 1\n        if not sortie :\n            self.fb.addTestError(\"Erreur !\",\"<br>\".join(traceback.format_exception(exc_info[0],exc_info[1],exc_info[2],limit=1)),\"\")\n        else :\n            self.fb.addTestError(sortie+\": en erreur ! \", \"<br>\".join(traceback.format_exception(exc_info[0],exc_info[1],exc_info[2],limit=1)), \"\")\n\n    def summarize(self):\n        self.fb.doTextOutput()\n        \n    def grade(self):\n        if self.fb.globalok :\n           return 100\n        if self.total:\n            return 100*(self.right/self.total)\n        else:\n            return 0\n\n\n\n\n\n\n\n\n",
    "grader.py": "#!/usr/bin/env python3\n# coding: utf-8\nimport sys, jsonpickle, re\nfrom sandboxio import output, get_context, get_answers\nfrom pltest_doc import PlRunner\n\n\nmissing_evaluator_stderr = \"\"\"\\\nThe key 'evaluator' was not found in the context.\nWhen using this grader, the PL must declare a script inside a key 'evaluator'. This script have\naccess to every variable declared in the PL and its 'before' script.\nIt should declare a variable 'grade' which should contain a tuple (int, feedback) where int is the grade between [0, 100].\"\"\"\nmissing_grade_stderr = \"\"\"\\\n'evaluator' did not declare the variable 'grade'. \nThe script have access to every variable declared in the PL and its 'before' script.\nIt should declare a variable 'grade' which should contain a tuple (int, feedback) where int is the grade between [0, 100].\"\"\"\nif __name__ == \"__main__\":\n    if len(sys.argv) < 5:\n        msg = (\"Sandbox did not call grader properly:\\n\"\n               + \"Usage: python3 grader.py [input_json] [output_json] [answer_file] [feedback_file]\")\n        print(msg, file=sys.stderr)\n        sys.exit(1)\n\n    \n    dic = get_context()\n    if \"pltest\" not in dic and \"pltest0\" not in dic and \"pltest1\" not in dic:\n        print(\"add  either pltest or pltestN , or change the template \", file=sys.stderr)\n        sys.exit(1)\n    if 'stopfirsterror' in dic:\n        stop=bool(dic['stopfirsterror'])\n    else:\n        stop=False\n    student = get_answers()['answer']\n    outstr=\"\"\n#    if \"pltestbuilder\" in dic:\n#        if \"soluce\" not in dic:\n#                print(\" illegal use of pltestbuilder sql soluce is empty\", file=sys.stderr)\n#                sys.exit(1)\n#        import pltestbuilder\n#        tester = SQLPlRunner(student,dic[\"soluce\"])\n#        a, b = tester.runpltest(1)\n#    elif\n    if \"pltest\" in dic:\n        pltest = dic['pltest']\n        tester = PlRunner(student,pltest)\n        a, b = tester.runpltest(1)\n    elif \"pltest0\" in dic:\n        pltest = dic['pltest0']\n        tester = PlRunner(student,pltest)\n        a, b = tester.runpltest(1)\n    else:\n\n        a,b= True, \"\"\n    i=1\n    while \"pltest\"+str(i) in dic and (a or stop ) :\n        outstr += b\n        testi = PlRunner(student,dic[\"pltest\"+str(i)])\n        a, b = testi.runpltest(i+1)\n        i=i+1\n\n    outstr +=  b\n    if \"feedback\" in dic: # FIXME feedback devrai \u00eatre un dictionnaire.\n        outstr += dic[\"feedback\"]+\" valeur de stop \"+ str(stop)\n    output(a,outstr)\n    \n\n\n",
    "feedback2.py": "#!rusr/bin/env python3\n# -*- coding: utf-8 -*-\n#\n#   feedback2.py\n#  \n#  Copyright 2018 Dominique Revuz <dr@univ-mlv.fr>\n#\n\n\n\nimport jinja2\n\nERROR=\"error\"\nFAILURE=\"failure\"\nSUCCESS=\"success\"\nSYNTAX=\"syntax\"\n\n__doc__=\"\"\"\n\nLa classe feedback permet de gerer l'evolution de l'\u00e9valuation d'un exercice.\n\nOrganisation de l'\u00e9valuation d'un exercice de programmation:\n\nDeux parties:\n une partie erreurs:\n    -> erreur de compilation \n    -> erreur de r\u00e9ponse (r\u00e9f\u00e9rence manquante pour r\u00e9pondre \u00e0 la question)\n    -> erreur de regle [ une r\u00e8gle de l'\u00e9nonc\u00e9 \u00e0 \u00e9t\u00e9 d\u00e9tourn\u00e9e ]\n une partie Tests :\n    -> les tests ont \n        -> un num\u00e9ro \n        -> un affichage [ soit un texte, soit une ligne de code] \n        -> un etat [success, failure, error ]\n\n\nComment utiliser feedback2 \n\n    pour chaque test \n\"\"\"\n\n# class CompositeFeedback():\n\n\nclass FeedBack():\n    def __init__(self,name=\"\",filename=\"template.html\"):\n        self.tests = []\n        self.globalok = True  # if not true at least one problem\n        self.numtest = 0\n        self.name = str(name)\n        self.filename=filename\n        self.globalfeedback =\"\"\n\n    def addTestSuccess(self, text, got, want):\n        \"\"\"\n        :param text: the test name\n        :param got: result of execution\n        :param want: what was expected\n\n        add a  postive test result to the feedback\n        \"\"\"\n        self.numtest += 1\n        self.tests.append((SUCCESS, self.numtest, text, got, want))\n\n    def addTestFailure(self, text, got, want):\n        \"\"\"\n        :param text: the test name\n        :param got: result of execution\n        :param want: what was expected\n\n        add a negative test result to the feedback\n        \"\"\"\n        self.numtest += 1\n        self.globalok = False\n        self.tests.append((FAILURE, self.numtest, text, got, want))\n\n    def addTestError(self, text, error, para):\n        \"\"\"\n        :param text: the test name\n        :param error: the string version of the Exception that occured using format_exec\n        :param para: a text corellated to the state compilation error or execution error\n\n        add a  negative+error test result to the feedback\n        \"\"\"\n        self.globalok = False\n        self.numtest += 1\n        error = \"<br>\".join(error.split(\"\\n\"))\n        self.tests.append((ERROR, self.numtest, text, error, para))\n\n    def addTestSyntaxError(self, text, error, para):\n        \"\"\"\n        :param text: the test name\n        :param error: the Exception that occured\n        :param para: a text corellated to the state compilation error or execution error\n\n        add a  negative+error test result to the feedback\n        \"\"\"\n        self.globalok = False\n        self.numtest += 1\n        self.tests.append((SYNTAX, self.numtest, text, error, para))\n\n    def addGlobalFeedback(self,feedback):\n        self.globalfeedback += feedback\n\n    def _doTextOutput(self):\n            print(getOutout())\n\n    def getOutput(self):\n        s=\"\"\n        for e,n,t,x,y in self.tests:\n            s += \"Test num :\"+str(n)+\" \"+e+\" \"+t+\" \" +x+\" \"+ y +\"\\n\"\n        return s\n\n    def __str__(self):\n        return self.render()\n\n    def render(self):\n        with open(self.filename,\"r\") as tempfile:\n            templatestring = tempfile.read()\n        template = jinja2.Template(templatestring)\n        x= template.render(feedback=self)\n        return  x \n\n\n\n\n\n",
    "template.html": "<!-- default template used by the feedback code can be bypassed in  feedback class see documentation -->\n{% if feedback.globalok %}\n<div style=\"border:1px solid black;padding:0%;margin:1%;background-color:LightGreen;border-radius:4px;\">\n<button type=\"button\" class=\"btn btn-block btn-success\"\ndata-toggle=\"collapse\" data-target=\"#suite{{feedback.name}}\">\n{{feedback.name}} success\n</button>\n<div id=\"suite{{feedback.name}}\" class=\"collapse\">\n<div class=\"card card-success;\" style=\"background-color: LightGreen;\">\n{% else %}\n<div style=\"border:1px solid black;padding:1%;margin:1%;background-color:Tomato;border-radius:4px;\">\n<button type=\"button\" class=\"btn btn-block  btn-danger\"\naria-expanded=\"true\" aria-controls=\"suite{{feedback.name}}\"\ndata-toggle=\"collapse\" data-target=\"#suite{{feedback.name}}\">\n{{feedback.name}}  Failure\n</button>\n<div id=\"suite{{feedback.name}}\" class=\"show\">\n<div class=\"card card-danger;\" style=\"background-color: Tomato;\">\n{% endif %}   \n{% for type,num,text,got,want in feedback.tests %}\n{%  if type==\"failure\" %}\n<div style=\"border:1px solid black;padding:1px;margin:1px;background-color:Tomato;border-radius:4px;\">\n<button type=\"button\" class=\"btn btn-block btn-danger\"\naria-expanded=\"true\" aria-controls=\"demo{{feedback.name}}{{num}}\"\ndata-toggle=\"collapse\" data-target=\"#demo{{feedback.name}}{{num}}\">\n{{ text }} Failure\n</button>\n<div id=\"demo{{feedback.name}}{{num}}\" class=\"show\">\n<div class=\"card card-danger;\" style=\"background-color: Tomato;\">\n<p>{{text}}\n{% if want or got %}\n<br/> Attendu: {{want}}\n<br/> Obtenu: {{got}}\n{% endif %}\n</p>\n</div>\n</div>\n</div>\n{% endif %}\n{% if globalfeedback != \"\" %}\n<div style=\"border:1px white;padding:1px;margin:1px;background-color:LightBlue;border-radius:4px;\">\n{{ globalfeedback }}\n</div>\n{% endif %}\n{% if type==\"success\" %}\n<div style=\"border:1px white;padding:1px;margin:1px;background-color:LightGreen;border-radius:4px;\">\n<button type=\"button\" class=\"btn btn-block btn-success\"\ndata-toggle=\"collapse\" data-target=\"#demo{{feedback.name}}{{num}}\">\n{{text}} success\n</button>\n<div id=\"demo{{feedback.name}}{{num}}\" class=\"collapse\">\n<div class=\"card card-success;\" style=\"background-color: LightGreen;\">\n<p>{{text}}\n{% if want or got %}\n<br/> Attendu: {{want}}\n<br/> Obtenu: {{got}}\n{% endif %}\n</p>\n</div>\n</div>\n</div>\n{%  endif %}\n{% if type==\"error\"  %}\n<div style=\"border:2px solid black;padding:1px;margin:1px;background-color:Tomato;border-radius:4px;\">\n<button type=\"button\" class=\"btn btn-block btn-danger\"\ndata-toggle=\"collapse\" data-target=\"#demo{{feedback.name}}{{num}}\">\n{{ text }} Error Failure\n</button>\n<div id=\"demo{{feedback.name}}{{num}}\" class=\"show\">\n<div class=\"card card-danger\" style=\"background-color: Tomato;\">\n<p><br>{{got}} <br>{{\u00a0want }} </p>\n</div>\n</div>\n</div>\n\n{%  endif %}\n{% if  type==\"syntax\" %}\n<div style=\"border:2px solid black;padding:1px;margin:1px;background-color:Tomato;border-radius:4px;\">\n<button type=\"button\" class=\"btn btn-block btn-danger\"\ndata-toggle=\"collapse\" data-target=\"#demo{{feedback.name}}{{num}}\">\n{{ text}} ///// {{\u00a0want }}\n</button>\n<div id=\"demo{{feedback.name}}{{num}}\" class=\"show\">\n<div class=\"card card-danger\" style=\"background-color: black; \">\n<p style=\"color: yellow;\">{{got}} </p>\n</div>\n</div>\n</div>\n{%  endif %}\n{% endfor %}\n</div>\n</div>\n</div>\n\n\n\n",
    "builder.py": "#!/usr/bin/env python3\n# coding: utf-8\n\nimport sys, json, jsonpickle\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 3:\n        msg = (\"Sandbox did not call builder properly:\\n\"\n               +\"Usage: python3 builder.py [input_json] [output_json]\")\n        print(msg, file=sys.stderr)\n        sys.exit(1)\n    input_json = sys.argv[1]\n    output_json = sys.argv[2]\n    \n    with open(input_json, \"r\") as f:\n        dic = json.load(f)\n            \n    with open(output_json, \"w+\") as f:\n        f.write(jsonpickle.encode(dic, unpicklable=False))\n    \n    sys.exit(0)\n",
    "components.py": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n#\n#  source.py\n#\n#  Copyright 2019 Cisse Mamadou [mciissee@gmail.com]\n\nimport importlib\nimport inspect\nimport json\nimport random\nimport sys\nimport uuid\n\n\n\ndef components_source():\n    \"\"\"\n    Used by playexo to retrieve the place this file\n    on the sandbox before a build\n    \"\"\"\n    \n    mod = sys.modules[__name__]\n    return inspect.getsource(mod)\n\n\n# MAP OF CURRENTS COMPONENTS WHERE KEY\n# IS THE NAME OF THE COMPONENT AND VALUE\n# THE SELECTOR OF THE COMPONENT\nSELECTORS = {\n    \"AutomatonDrawer\": \"c-automaton-drawer\",\n    \"AutomatonEditor\": \"c-automaton-editor\",\n    \"CheckboxGroup\":   \"c-checkbox-group\",\n    \"CodeEditor\":      \"c-code-editor\",\n    \"DragDrop\":        \"c-drag-drop\",\n    \"GraphDrawer\":     \"c-graph-drawer\",\n    \"Input\":           \"c-input\",\n    \"MatchList\":       \"c-match-list\",\n    \"MathDrawer\":      \"c-math-drawer\",\n    \"MathInput\":       \"c-math-input\",\n    \"MathMatrix\":      \"c-math-matrix\",\n    \"RadioGroup\":      \"c-radio-group\",\n    \"SortList\":        \"c-sort-list\",\n    \"Text\":            \"c-text\",\n    \"TransfertList\":   \"c-transfert-list\"\n}\n\n\n\nclass Component:\n    \"\"\"\n        Base class of the components.\n    \"\"\"\n    \n    \n    def __init__(self, **kwargs):\n        for k, v in kwargs.items():\n            setattr(self, k, v)\n        \n        if getattr(self, 'cid', '') == '':\n            self.cid = str(uuid.uuid4())\n    \n    \n    def __str__(self):\n        return str(vars(self))\n    \n    \n    @staticmethod\n    def deserialize(target, data):\n        \"\"\"\n        Transforms `target` into the instance of a class extending `Component`\n        and initializes its fields with the given dict `data`.\n\n        - If `target` is already an instance of `Component` values of\n        `data` will be copied into it. (always true if deserialized during grade)\n\n        - if 'target' is a dict (always true during build) and `decorator` key is in it,\n        target will be instancied as an instance of decorator retrieved from the sandbox.\n\n        - If none of the case above are not respected, the method will creates\n        and instance of the type depending of `selector` key of `data`.\n        \"\"\"\n        if isinstance(target, Component):\n            for k, v in data.items():\n                setattr(target, k, v)\n            return target\n        \n        decorator = None\n        \n        if isinstance(target, dict):\n            decorator = data.get('decorator')\n        \n        if decorator:\n            module = importlib.import_module(decorator.lower())\n            return getattr(module, decorator)(**data)\n        \n        selector = data.get('selector')\n        if not selector:\n            msg = 'selector property is required for components'\n            raise Exception(msg)\n        for k in SELECTORS:\n            if SELECTORS[k] == selector:\n                cls = globals().get(k)\n                if not cls:\n                    break\n                return cls(**data)\n        \n        return Component(**data)\n    \n    \n    @staticmethod\n    def sync_context(context):\n        context['Component'] = Component\n        for k in SELECTORS:\n            context[k] = globals()[k]\n        \n        # tranform dict with cid properties to a component\n        for k, v in context.items():\n            if isinstance(v, dict) and 'cid' in v:\n                context[k] = Component.deserialize(v, v)\n        \n        # sync answers with context in grader\n        answers = None\n        for arg in sys.argv:\n            if arg == 'answers.json':\n                with open(arg, \"r\") as f:\n                    answers = json.load(f)\n                    break\n        \n        copy = dict(context)\n        if answers:\n            for k, v in answers.items():\n                if isinstance(v, dict) and \"cid\" in v:\n                    for k2, v2 in copy.items():\n                        if isinstance(v2, Component) and v2.cid == v[\"cid\"]:\n                            context[k2] = Component.deserialize(v2, v)\n    \n    \n    @staticmethod\n    def from_context(context):\n        components = {}\n        for k, v in context.items():\n            if isinstance(v, dict) and 'cid' in v:\n                components[k] = {\n                    e: v[e] for e in v if not e.startswith('_')\n                }\n        return components\n\n\n\nclass SortList(Component):\n    \"\"\"\n    Custom class for SortList component.\n    \"\"\"\n    \n    \n    def __init__(self, **kwargs):\n        self._answer = []\n        super().__init__(**kwargs)\n        self.selector = 'c-sort-list'\n    \n    \n    def remind(self):\n        \"\"\"\n        Saves the current ordering of the items\n        to provides auto correction when self.auto_grade()\n        will be called.\n\n        The method stores the id properties of the items\n        in a list and compares it with the list retrieved\n        during evaluation.\n\n        Then it will randomize the items\n        \"\"\"\n        \n        # since self._answer starts with '_'\n        # it will be hidden to the student\n        \n        self._answer = []\n        for e in self.items:\n            self._answer.append(e['id'])\n        \n        random.shuffle(self.items)\n    \n    \n    def parse_string(self, separator=\"\\n\"):\n        \"\"\"\n        Assumes that current type of self.items is str\n        and initializes items to the JSON format required\n        by the component in JS.\n\n        The method will split the items by using the argument separator.\n        \"\"\"\n        items = self.items.split(separator)\n        self.items = []\n        for e in items:\n            if e.strip():\n                self.items.append({\n                    \"id\":      str(uuid.uuid4()),\n                    \"content\": e,\n                })\n    \n    \n    def auto_grade(self):\n        \"\"\"\n        Provides an grade according to the answer of a student using the list\n        saved during the last call to self.remind()\n        \"\"\"\n        \n        score = 0\n        if len(self._answer) != len(self.items):\n            for e in self.items:\n                e[\"css\"] = \"error-state anim-fade\"\n            return 0\n        \n        for i, e in enumerate(self._answer):\n            self.items[i]['css'] = 'success-state anim-fade'\n            score += 1\n            if self.items[i]['id'] != e:\n                self.items[i]['css'] = 'error-state anim-fade'\n                score -= 1\n        \n        return score / len(self._answer)\n\n\n\nclass AutomatonEditor(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-automaton-editor'\n\n\n\nclass AutomatonDrawer(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-automaton-drawer'\n\n\n\nclass CheckboxGroup(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-checkbox-group'\n\n\n\nclass CodeEditor(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-code-editor'\n\n\n\nclass DragDrop(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-drag-drop'\n\n\n\nclass GraphDrawer(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-graph-drawer'\n\n\n\nclass Input(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-input'\n\n\n\nclass MatchList(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-match-list'\n\n\n\nclass MathDrawer(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-math-drawer'\n\n\n\nclass MathInput(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-math-input'\n\n\n\nclass MathMatrix(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-math-matrix'\n\n\n\nclass RadioGroup(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-radio-group'\n\n\n\nclass Text(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-text'\n\n\n\nclass TransfertList(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-transfert-list'\n",
    "save_answer.py":"#!/usr/bin/env python3\n# coding: utf-8\n\nimport sys, json, jsonpickle\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 4:\n        msg = (\"Sandbox did not call saver properly:\\n\"\n               +\"Usage: python3 save_answer.py [input_json] [answer_json]\")\n        print(msg, file=sys.stderr)\n        sys.exit(1)\n\n    input_json = sys.argv[1]\n    current_answer = sys.argv[2]\n\n    with open(input_json, \"r\") as f:\n        dic = json.load(f)\n\n    dic[\"current_answer\"] = current_answer\n\n    with open(input_json, \"r\") as f:\n        f.write(jsonpickle.encode(dic, unpicklable=False))\n\n    sys.exit(0)"
  }, 
  "__dependencies": ["/srv/local/pl/premierlangage/home/Yggdrasil/ComputerScience/python/concept/variable/variable001.pl", "utils/sandboxio.py", "/srv/local/pl/premierlangage/home/Yggdrasil/ComputerScience/python/template/pltest.pl", "ComputerScience/python/template/pltest_doc.py", "ComputerScience/python/template/pltestgrader.py", "ComputerScience/python/template/feedback2.py", "ComputerScience/python/template/template.html", "utils/sandboxio.py", "builder/none.py"],
  "__extends": [
    {
      "path": "ComputerScience/python/template/pltest.pl",
      "line": "extends=/ComputerScience/python/template/pltest.pl\n",
      "lineno": 7,
      "directory_name": "Yggdrasil"
    }
  ], 
  "author": "DR", 
  "title": "Initialisation d'une variable.", 
  "tag": "variable", 
  "text": "\nCr\u00e9er trois variables pim pam et pom contenant respectivement 1 2 et 3.\n", 
  "code": "pim,pam,pom=0,0,0", "pltest": ">>> pim # Pim vaut un\n1\n>>> pam == pam  #\nTrue\n>>> pam\n2\n>>> pom\n3", 
  "doc": "pour cela vous utiliser la syntaxe de doctest par exemple pour tester une fonction f \n\n    pltest==\n    >>> f == f # La fonction existe  ?\n    True\n    >>> f() # f retourne ou affiche  42\n    42\n    >>> f() == 42 # retourne 42 \n    True\n    ==\n\nSi vous voulez plusieurs groupes de test vous notez pltest1 puis pltest2 etc \n\n    pltest1==\n    Le test suivant sera affich\u00e9 telquel \u00e0 l'\u00e9tudiant \n    >>> f != f\n    True \n    ET sera biensur toujour faux\n    le test suivant ne sera affich\u00e9 que si il cause une erreur et seulement l'erreur sera affich\u00e9\n    >>> f==f #\n    True\n\n    le test suivant affichera le text qui suit le #\n    >> f == f # Bande de moules \n    True\n    ==\n  #@ template.md [template.html]\n        \n\nSi vous souhaitez faire des tests sur le code de l'\u00e9l\u00e8ve la variable __student__ est accessible dans le pltest\n\n    pltest2==\n    >>> student.count(\"if\")>1 # Trop de tests IF \n    False\n    ==\n",
  "editor": {
    "fontsize": "14"
  }, 
  "form": "{% with editorid__=firstof(editor.id, 'answer') %}\n    {% with answer_editor__=firstof(answers__[editorid__], editor.code) %}\n    <!-- Do not tabulate this div as the tabulation will appear in the editor -->\n    <div id=\"editor\" style=\"resize: both; overflow: auto; border: 1px #E7E7E7 solid; border-width: 1px; border-color: #BBB; border-radius: 4px; height: {% if editor.height %}{{ editor.height}}{% else %}400{% endif %}px; #E7E7E7 solid;\"\n    >{{ answer_editor__ }}</div>\n    <!-- Input in which editor's content is copied -->\n    <input id=\"form_{{ editorid__ }}\"\n        type=\"hidden\"\n        style=\"display: none;\"\n        value=\"{{ answer_editor__ | escape }}\"\n    >\n    {% endwith %}\n{% endwith %}\n\n<script src=\"{{ static('js/ace/ace.js') }}\" type=\"text/javascript\" charset=\"utf-8\"></script>\n<script src=\"{{ static('js/ace/ext-modelist.js') }}\"></script>\n<script>\n    window.define = window.define || ace.define;\n    var editor = ace.edit('editor');\n\n    // Set the theme according to user's preferences.\n    editor.setTheme(\n        \"{{ user_settings__.editor_theme.template }}\"\n    );\n\n    // Set syntax highlight language to 'editor.language', default to python.\n    editor.session.setMode(\n        \"ace/mode/{% if editor.language %}{{editor.language}}{% else %}python{% endif %}\"\n    );\n\n    // Set tabulation size to 'editor.tabsize', default to 4.\n    editor.session.setTabSize(\n        {% if editor.tabsize %}{{ editor.tabsize }}{% else %}4{% endif %}\n    );\n\n    // Set the font size to 'editor.fontsize', default to 12\n    editor.setFontSize(\n        {% if editor.fontsize %}{{ editor.fontsize }}{% else %}12{% endif %}\n    );\n\n    // Will display indent guide if 'editor.indentguide' is different\n    // than 'false' (not case sensitive), default to true\n    editor.setDisplayIndentGuides(\n        {% if editor.indentguide|lower == \"false\" %}false{% else %}true{% endif %}\n    );\n\n    // Will display invisible characters (like spaces or new lines) if 'editor.showinvisible'\n    // is different than 'false' (not case sensitive), default to true\n    editor.setShowInvisibles(\n        {% if editor.showinvisible|lower == \"false\" %}false{% else %}true{% endif %}\n    );\n\n    // Will use use space instead of tabulation if 'editor.spacetab'\n    // is different than 'false' (not case sensitive), default to true\n    editor.session.setUseSoftTabs(\n        {% if editor.spacetab|lower == \"false\" %}false{% else %}true{% endif %}\n    );\n\n\n    var input = $( \"#{% if editor.id %}form_{{ editor.id }}{% else %}form_answer{% endif %}\" );\n    editor.session.on(\"change\", function() {\n        input.val(editor.getSession().getValue());\n    });\n</script>\n\n", 
  "settings": {
    "allow_reroll": "1"
  }, 
  "seed": 5, 
  "activity_id__": 45
}