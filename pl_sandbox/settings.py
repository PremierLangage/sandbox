"""
Django settings for pl_sandbox project.

Generated by 'django-admin startproject' using Django 1.11.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import logging
import os
import threading
import time
import platform


from sandbox.container import initialise_container


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '+61drt2^c32qp)knvy32m*xm*ew=po%f8a9l!bp$kd7mz3(109'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['pl-sandbox.u-pem.fr', '127.0.0.1']

# Application definition
INSTALLED_APPS = [
    'sandbox',
]

MIDDLEWARE = []

ROOT_URLCONF = 'pl_sandbox.urls'

WSGI_APPLICATION = 'pl_sandbox.wsgi.application'

# Database
DATABASES = {}

# Needed for manage.py to run without database
TEST_RUNNER = 'pl_sandbox.testing.DatabaselessTestRunner'

# Password validation
AUTH_PASSWORD_VALIDATORS = []

# Write email in console instead of sending it if DEBUG is set to True
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Logger information
LOGGER_ADDRESS = '/dev/log'
if platform.system() == 'Darwin':
    # https://docs.python.org/3/library/logging.handlers.html#sysloghandler
    LOGGER_ADDRESS = '/var/run/syslog'

LOGGING = {
    'version'                 : 1,
    'disable_existing_loggers': False,
    'filters'                 : {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true' : {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters'              : {
        'verbose': {
            'format' : '[%(asctime)-15s] %(levelname)s -- '
                       'File: %(pathname)s line n°%(lineno)d -- %(message)s',
            'datefmt': '%Y/%m/%d %H:%M:%S'
        },
        'simple' : {
            'format' : '[%(asctime)-15s] %(levelname)s -- %(message)s',
            'datefmt': '%Y/%m/%d %H:%M:%S'
        },
    },
    'handlers'                : {
        'console'     : {
            'level'    : 'DEBUG',
            'filters'  : ['require_debug_true'],
            'class'    : 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'syslog'      : {
            'level'    : 'INFO',
            'class'    : 'logging.handlers.SysLogHandler',
            'facility' : 'local6',
            'address'  : LOGGER_ADDRESS,
            'formatter': 'verbose',
            'filters'  : ['require_debug_false'],
        },
        'syslog_debug': {
            'level'    : 'DEBUG',
            'class'    : 'logging.handlers.SysLogHandler',
            'facility' : 'local6',
            'address'  : LOGGER_ADDRESS,
            'formatter': 'verbose',
            'filters'  : ['require_debug_true'],
        },
        'mail_admins' : {
            'level'       : 'WARNING',
            'class'       : 'django.utils.log.AdminEmailHandler',
            'include_html': True,
            'formatter'   : 'verbose'
        }
    },
    'loggers'                 : {
        'sandbox': {
            'handlers': ['console', 'syslog', 'mail_admins', 'syslog_debug'],
            'level'   : 'DEBUG',
        },
    },
}

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
STATIC_URL = '/static/'

# Exercise's environment
MEDIA_ROOT = os.path.join(BASE_DIR, 'environments')
MEDIA_URL = '/environments/'
if not os.path.isdir(MEDIA_ROOT):
    os.makedirs(MEDIA_ROOT)

# Sandbox parameters
# DEL_ENV_AFTER: number of secondes before a normal environment should be deleted
# DEL_TEST_ENV_AFTER: number of secondes before a test environment should be deleted
# WAIT_FOR_CONTAINER_DURATION: time before returning a '503: Service Unavailable' when waiting for
#                              a container.
SANDBOX_VERSION = "1.0.8"
DAY = 86400 #  86400 sec in a day
DEL_ENV_AFTER = 7 * DAY
DEL_TEST_ENV_AFTER = 1 * DAY
TEST_PREFIX = "test_"
WAIT_FOR_CONTAINER_DURATION = 2

# Docker parameters
# COUNT            - (int) Max number of containers running simultaneously.
# IMAGE            - (str) Image use to create the containers.
# ENV_VAR          - (dic) Environment variables to set inside the container, as a dictionary.
# MEM_LIMIT        - (str) Memory limit. String with a units identification char (13b, 12k, 14m, 1g)
#                          min is 4m.
# MEMSWAP_LIMIT    - (str) https://docs.docker.com/engine/admin/resource_constraints/
# CPUSET_CPUS      - (str) CPUs on which to allow execution ("0-3", "0,1").
# VOLUME_CONTAINER - (str) Path to the directory shared with the host inside the container.
# VOLUME_HOST      - (str) Path to the root directory containing each directory shared with the
#                          containers. To create these directory, a directory named after the
#                          container's name is create in VOLUME_HOST.
# DEFAULT_FILES    - (str) Where the default files (files present in each container cwd) are stored.
DOCKER_COUNT = 5
DOCKER_IMAGE = "pl:latest"
DOCKER_ENV_VAR = {}
DOCKER_MEM_LIMIT = "100m"
DOCKER_MEMSWAP_LIMIT = "200m"
DOCKER_CPUSET_CPUS = "0"
DOCKER_VOLUME_CONTAINER = "/home/docker"
DOCKER_VOLUME_HOST = os.path.join(BASE_DIR, 'containers_env')
DOCKER_DEFAULT_FILES = os.path.join(BASE_DIR, 'default_file')

# Check if any of the above settings are override by a config.py file.
try:
    from pl_sandbox.config import *
    logger = logging.getLogger(__name__)
    logger.info("Using config.py...")
except:
    pass

threading.Thread(target=initialise_container).start()

time.sleep(2)
